name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: morrow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: ./backend
        args: --timeout=5m

    - name: Build backend
      working-directory: ./backend
      run: go build -v ./...

    - name: Test backend with coverage
      working-directory: ./backend
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: morrow_test
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: morrow_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_SSL_MODE: disable
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    # Codecov upload temporarily disabled due to rate limiting
    # - name: Upload Go coverage reports to Codecov
    #   uses: codecov/codecov-action@v4
    #   if: github.event_name == 'push' && github.ref_name == 'main' || github.ref_name == 'develop'
    #   with:
    #     file: ./backend/coverage.out
    #     flags: backend
    #     name: backend-coverage
    #     fail_ci_if_error: false
    #     token: ${{ secrets.CODECOV_TOKEN }}

  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend Docker image
      run: docker compose build frontend

    - name: Install dependencies
      run: docker compose run --rm frontend npm install

    - name: Verify dependencies
      run: docker compose run --rm frontend npm list clsx tailwind-merge nanoid

    - name: Type check
      run: docker compose run --rm frontend npm run type-check

    - name: Lint check
      run: docker compose run --rm frontend npm run lint

    - name: Format check
      run: docker compose run --rm frontend npm run format:check

    - name: Run tests with coverage
      run: docker compose run --rm frontend npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: docker compose run --rm frontend npm run build

    # Codecov upload temporarily disabled due to rate limiting
    # - name: Upload React Native coverage reports to Codecov
    #   uses: codecov/codecov-action@v4
    #   if: github.event_name == 'push' && github.ref_name == 'main' || github.ref_name == 'develop'
    #   with:
    #     file: ./frontend/coverage/lcov.info
    #     flags: frontend
    #     name: frontend-coverage
    #     fail_ci_if_error: false
    #     token: ${{ secrets.CODECOV_TOKEN }}

  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Docker network
      run: docker network create morrow-network || true

    - name: Build services including Playwright
      run: |
        docker compose build

    - name: Start PostgreSQL service
      run: |
        docker compose up -d postgres
        sleep 10

    - name: Start backend service
      run: |
        docker compose up -d backend
        sleep 15

    - name: Start frontend service
      run: |
        docker compose up -d frontend
        sleep 10

    - name: Wait for services to be ready
      run: |
        # Wait for backend health check
        timeout 60 bash -c 'until curl -f http://localhost:8080/health || curl -f http://localhost:8080/query; do sleep 2; done'

        # Wait for frontend to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run E2E tests (connectivity only for CI)
      run: |
        docker compose --profile tools run --rm playwright npm run test:connectivity
      env:
        CI: true

    - name: Run E2E tests (fast smoke tests)
      run: |
        docker compose --profile tools run --rm playwright npm run test:fast
      env:
        CI: true

    - name: Upload Playwright test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: |
          playwright/test-results/
          playwright/playwright-report/
        retention-days: 7

    - name: Upload Playwright HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-html-report
        path: playwright/playwright-report/
        retention-days: 7

    - name: Show Docker logs on failure
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        docker compose logs backend
        echo "=== Frontend Logs ==="
        docker compose logs frontend
        echo "=== PostgreSQL Logs ==="
        docker compose logs postgres

    - name: Cleanup Docker services
      if: always()
      run: |
        docker compose down -v
        docker network rm morrow-network || true

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build development Docker images
      run: |
        docker compose build
        docker compose config

    - name: Build production Docker images
      env:
        DB_PASSWORD: test_password
        JWT_SECRET: test_jwt_secret_for_ci_only
        REACT_APP_API_URL: http://localhost:8080
      run: |
        docker compose -f docker-compose.prod.yml build
        docker compose -f docker-compose.prod.yml config

    - name: Test Docker services startup
      run: |
        docker compose up -d postgres
        sleep 10
        docker compose ps
        docker compose down
