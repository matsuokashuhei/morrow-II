name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend
        args: --timeout=5m

    - name: Build backend
      working-directory: ./backend
      run: go build -v ./...

    - name: Test backend with coverage
      working-directory: ./backend
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    # Codecov upload temporarily disabled due to rate limiting
    # - name: Upload Go coverage reports to Codecov
    #   uses: codecov/codecov-action@v4
    #   if: github.event_name == 'push' && github.ref_name == 'main' || github.ref_name == 'develop'
    #   with:
    #     file: ./backend/coverage.out
    #     flags: backend
    #     name: backend-coverage
    #     fail_ci_if_error: false
    #     token: ${{ secrets.CODECOV_TOKEN }}

  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Type check
      working-directory: ./frontend
      run: npm run type-check

    - name: Lint check
      working-directory: ./frontend
      run: npm run lint

    - name: Format check
      working-directory: ./frontend
      run: npm run format:check

    - name: Run tests with coverage
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    # Codecov upload temporarily disabled due to rate limiting
    # - name: Upload React Native coverage reports to Codecov
    #   uses: codecov/codecov-action@v4
    #   if: github.event_name == 'push' && github.ref_name == 'main' || github.ref_name == 'develop'
    #   with:
    #     file: ./frontend/coverage/lcov.info
    #     flags: frontend
    #     name: frontend-coverage
    #     fail_ci_if_error: false
    #     token: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build development Docker images
      run: |
        docker compose build
        docker compose config

    - name: Build production Docker images
      env:
        DB_PASSWORD: test_password
        JWT_SECRET: test_jwt_secret_for_ci_only
        REACT_APP_API_URL: http://localhost:8080
      run: |
        docker compose -f docker-compose.prod.yml build
        docker compose -f docker-compose.prod.yml config

    - name: Test Docker services startup
      run: |
        docker compose up -d postgres
        sleep 10
        docker compose ps
        docker compose down
