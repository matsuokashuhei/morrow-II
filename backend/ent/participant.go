// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/matsuokashuhei/morrow-backend/ent/event"
	"github.com/matsuokashuhei/morrow-backend/ent/participant"
	"github.com/matsuokashuhei/morrow-backend/ent/user"
)

// Participant is the model entity for the Participant schema.
type Participant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 参加者の権限 (owner: 作成者, viewer: 閲覧者)
	Role participant.Role `json:"role,omitempty"`
	// 参加状態
	Status participant.Status `json:"status,omitempty"`
	// 参加日時
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// 更新日時
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipantQuery when eager-loading is set.
	Edges              ParticipantEdges `json:"edges"`
	event_participants *int
	user_participants  *int
	selectValues       sql.SelectValues
}

// ParticipantEdges holds the relations/edges for other nodes in the graph.
type ParticipantEdges struct {
	// 参加ユーザー
	User *User `json:"user,omitempty"`
	// 対象イベント
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipantEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipantEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case participant.FieldID:
			values[i] = new(sql.NullInt64)
		case participant.FieldRole, participant.FieldStatus:
			values[i] = new(sql.NullString)
		case participant.FieldJoinedAt, participant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case participant.ForeignKeys[0]: // event_participants
			values[i] = new(sql.NullInt64)
		case participant.ForeignKeys[1]: // user_participants
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participant fields.
func (pa *Participant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case participant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case participant.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				pa.Role = participant.Role(value.String)
			}
		case participant.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pa.Status = participant.Status(value.String)
			}
		case participant.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				pa.JoinedAt = value.Time
			}
		case participant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case participant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_participants", value)
			} else if value.Valid {
				pa.event_participants = new(int)
				*pa.event_participants = int(value.Int64)
			}
		case participant.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_participants", value)
			} else if value.Valid {
				pa.user_participants = new(int)
				*pa.user_participants = int(value.Int64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Participant.
// This includes values selected through modifiers, order, etc.
func (pa *Participant) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Participant entity.
func (pa *Participant) QueryUser() *UserQuery {
	return NewParticipantClient(pa.config).QueryUser(pa)
}

// QueryEvent queries the "event" edge of the Participant entity.
func (pa *Participant) QueryEvent() *EventQuery {
	return NewParticipantClient(pa.config).QueryEvent(pa)
}

// Update returns a builder for updating this Participant.
// Note that you need to call Participant.Unwrap() before calling this method if this Participant
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participant) Update() *ParticipantUpdateOne {
	return NewParticipantClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Participant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Participant) Unwrap() *Participant {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participant is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participant) String() string {
	var builder strings.Builder
	builder.WriteString("Participant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", pa.Role))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pa.Status))
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(pa.JoinedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Participants is a parsable slice of Participant.
type Participants []*Participant
