# GraphQL schema for Morrow App
directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

# Base Node interface (for Relay)
interface Node {
  id: ID!
}

# User type
type User implements Node {
  id: ID!
  email: String!
  name: String!
  avatarUrl: String
  cognitoId: String
  createdAt: String!
  updatedAt: String!

  # Relations
  createdEvents: [Event!]!
  participants: [Participant!]!
}

# Event type
type Event implements Node {
  id: ID!
  title: String!
  description: String
  startTime: String!
  endTime: String!
  emoji: String
  visibility: EventVisibility!
  createdAt: String!
  updatedAt: String!

  # Relations
  creator: User!
  participants: [Participant!]!
}

# Participant type
type Participant implements Node {
  id: ID!
  role: ParticipantRole!
  status: ParticipantStatus!
  joinedAt: String!
  updatedAt: String!

  # Relations
  user: User!
  event: Event!
}

# Enums
enum EventVisibility {
  private
  shared
  public
}

enum ParticipantRole {
  owner
  viewer
}

enum ParticipantStatus {
  pending
  accepted
  declined
}

# Query type
type Query {
  # Node query (for Relay)
  node(id: ID!): Node

  # User queries
  user(id: ID!): User
  users: [User!]!

  # Event queries
  event(id: ID!): Event
  events: [Event!]!

  # Participant queries
  participant(id: ID!): Participant
  participants: [Participant!]!
}

# Input types
input CreateUserInput {
  email: String!
  name: String!
  avatarUrl: String
  cognitoId: String
}

input UpdateUserInput {
  name: String
  avatarUrl: String
  cognitoId: String
}

input CreateEventInput {
  title: String!
  description: String
  startTime: String!
  endTime: String!
  emoji: String
  visibility: EventVisibility = private
  creatorId: ID!
}

input UpdateEventInput {
  title: String
  description: String
  startTime: String
  endTime: String
  emoji: String
  visibility: EventVisibility
}

input CreateParticipantInput {
  role: ParticipantRole = viewer
  status: ParticipantStatus = pending
  userId: ID!
  eventId: ID!
}

input UpdateParticipantInput {
  role: ParticipantRole
  status: ParticipantStatus
}

# Mutation type
type Mutation {
  # User mutations
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!

  # Event mutations
  createEvent(input: CreateEventInput!): Event!
  updateEvent(id: ID!, input: UpdateEventInput!): Event!
  deleteEvent(id: ID!): Boolean!

  # Participant mutations
  createParticipant(input: CreateParticipantInput!): Participant!
  updateParticipant(id: ID!, input: UpdateParticipantInput!): Participant!
  deleteParticipant(id: ID!): Boolean!
}
