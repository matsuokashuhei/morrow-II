// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
	GetID() string
}

type CreateEventInput struct {
	Title       string           `json:"title"`
	Description *string          `json:"description,omitempty"`
	StartTime   string           `json:"startTime"`
	EndTime     string           `json:"endTime"`
	Emoji       *string          `json:"emoji,omitempty"`
	Visibility  *EventVisibility `json:"visibility,omitempty"`
	CreatorID   string           `json:"creatorId"`
}

type CreateParticipantInput struct {
	Role    *ParticipantRole   `json:"role,omitempty"`
	Status  *ParticipantStatus `json:"status,omitempty"`
	UserID  string             `json:"userId"`
	EventID string             `json:"eventId"`
}

type CreateUserInput struct {
	Email     string  `json:"email"`
	Name      string  `json:"name"`
	AvatarURL *string `json:"avatarUrl,omitempty"`
	CognitoID *string `json:"cognitoId,omitempty"`
}

type Event struct {
	ID           string          `json:"id"`
	Title        string          `json:"title"`
	Description  *string         `json:"description,omitempty"`
	StartTime    string          `json:"startTime"`
	EndTime      string          `json:"endTime"`
	Emoji        *string         `json:"emoji,omitempty"`
	Visibility   EventVisibility `json:"visibility"`
	CreatedAt    string          `json:"createdAt"`
	UpdatedAt    string          `json:"updatedAt"`
	Creator      *User           `json:"creator"`
	Participants []*Participant  `json:"participants"`
}

func (Event) IsNode()            {}
func (this Event) GetID() string { return this.ID }

type Mutation struct {
}

type Participant struct {
	ID        string            `json:"id"`
	Role      ParticipantRole   `json:"role"`
	Status    ParticipantStatus `json:"status"`
	JoinedAt  string            `json:"joinedAt"`
	UpdatedAt string            `json:"updatedAt"`
	User      *User             `json:"user"`
	Event     *Event            `json:"event"`
}

func (Participant) IsNode()            {}
func (this Participant) GetID() string { return this.ID }

type Query struct {
}

type UpdateEventInput struct {
	Title       *string          `json:"title,omitempty"`
	Description *string          `json:"description,omitempty"`
	StartTime   *string          `json:"startTime,omitempty"`
	EndTime     *string          `json:"endTime,omitempty"`
	Emoji       *string          `json:"emoji,omitempty"`
	Visibility  *EventVisibility `json:"visibility,omitempty"`
}

type UpdateParticipantInput struct {
	Role   *ParticipantRole   `json:"role,omitempty"`
	Status *ParticipantStatus `json:"status,omitempty"`
}

type UpdateUserInput struct {
	Name      *string `json:"name,omitempty"`
	AvatarURL *string `json:"avatarUrl,omitempty"`
	CognitoID *string `json:"cognitoId,omitempty"`
}

type User struct {
	ID            string         `json:"id"`
	Email         string         `json:"email"`
	Name          string         `json:"name"`
	AvatarURL     *string        `json:"avatarUrl,omitempty"`
	CognitoID     *string        `json:"cognitoId,omitempty"`
	CreatedAt     string         `json:"createdAt"`
	UpdatedAt     string         `json:"updatedAt"`
	CreatedEvents []*Event       `json:"createdEvents"`
	Participants  []*Participant `json:"participants"`
}

func (User) IsNode()            {}
func (this User) GetID() string { return this.ID }

type EventVisibility string

const (
	EventVisibilityPrivate EventVisibility = "private"
	EventVisibilityShared  EventVisibility = "shared"
	EventVisibilityPublic  EventVisibility = "public"
)

var AllEventVisibility = []EventVisibility{
	EventVisibilityPrivate,
	EventVisibilityShared,
	EventVisibilityPublic,
}

func (e EventVisibility) IsValid() bool {
	switch e {
	case EventVisibilityPrivate, EventVisibilityShared, EventVisibilityPublic:
		return true
	}
	return false
}

func (e EventVisibility) String() string {
	return string(e)
}

func (e *EventVisibility) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventVisibility", str)
	}
	return nil
}

func (e EventVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *EventVisibility) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e EventVisibility) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ParticipantRole string

const (
	ParticipantRoleOwner  ParticipantRole = "owner"
	ParticipantRoleViewer ParticipantRole = "viewer"
)

var AllParticipantRole = []ParticipantRole{
	ParticipantRoleOwner,
	ParticipantRoleViewer,
}

func (e ParticipantRole) IsValid() bool {
	switch e {
	case ParticipantRoleOwner, ParticipantRoleViewer:
		return true
	}
	return false
}

func (e ParticipantRole) String() string {
	return string(e)
}

func (e *ParticipantRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantRole", str)
	}
	return nil
}

func (e ParticipantRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ParticipantRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ParticipantRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ParticipantStatus string

const (
	ParticipantStatusPending  ParticipantStatus = "pending"
	ParticipantStatusAccepted ParticipantStatus = "accepted"
	ParticipantStatusDeclined ParticipantStatus = "declined"
)

var AllParticipantStatus = []ParticipantStatus{
	ParticipantStatusPending,
	ParticipantStatusAccepted,
	ParticipantStatusDeclined,
}

func (e ParticipantStatus) IsValid() bool {
	switch e {
	case ParticipantStatusPending, ParticipantStatusAccepted, ParticipantStatusDeclined:
		return true
	}
	return false
}

func (e ParticipantStatus) String() string {
	return string(e)
}

func (e *ParticipantStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ParticipantStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ParticipantStatus", str)
	}
	return nil
}

func (e ParticipantStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ParticipantStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ParticipantStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
